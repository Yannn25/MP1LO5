                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 28 octobre 2022, 23h59

Identité
--------
Nombre de binôme: 6
Nom, prénom 1: Yann Edikeu
Nom, prénom 2: Hyejeong Im


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

	-Oui
---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

	-Oui

	Puisque la fonction 'filter_map filter list' retourne la nouvelle liste de 'list' filtré par filter,
	nous avons fait une filtre "aux c" qui vérifie si le littéral l est dans l'ensemble des clauses c, alors elle retourne None.
	Et à travers "aux2 x", si le littéral -l est dans l'ensemble des clauses c, on retourne Some None.
	A la fin, grâce à 'filter_map aux clauses', la clause qui contient littéral l va être supprimée et
	tous les littéraux -l vont être supprimés dans les clauses.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

   	-Nous avons écrit la fonction auxiliaire 'aux l'.
	1. lever une exception lors qu'il n'existe pas de clause unitaire dans 'clauses'
	   ou si 'clauses' est vide. 
	2. Si 'clauses' n'est pas vide, alors on vérifie si la clause 'c' de 'clauses' est une clause unitaire.
	   Si elle est unitaire, elle retourne le littéral c de cette clause unitaire.
	3. Si la clause 'c' n'est pas unitaire, alors continuer à rechercher une clause unitaire dans le reste de 'clauses'.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

   Pour la fonction auxiliaire de pur nous avons procéder a peu près de la meme manière que unitaire:
   1. lever une exception si il n'existe pas de clause pur dans 'clauses'
	   ou dans le cas ou 'clauses' est vide.
   2. Ensuite on vérifie que 'c' est toujours de la meme forme dans toutes les autres clausses (aussi bien les clauses que nous avons entièrement vérifié que le reste). Si 'c' est pur alors on le renvoi.
   3. Sinon on relance notre algo (aux) sur le reste des clauses, tout en ajoutant 'c' dans 'acc'.
---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

	-la fonction 'solveur_dpll_rec' vérifie si clauses contient des clauses unitaire(s)/pur(s) 
	alors que la fonction 'solveur_split' ne le vérifie pas.

	un exemple d'une formule : (P ∧ (Q ∧ ¬R)) ∨ R	(vu en cours)
 

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

   Rien de particulier.

---

--fin du fichier RENDU--